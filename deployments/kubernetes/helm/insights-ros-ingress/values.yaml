# Default values for insights-ros-ingress
# Based on ros-ocp-backend patterns for consistency

# Chart name overrides
nameOverride: ""
fullnameOverride: ""

global:
  # Storage class for persistent volumes
  storageClass: "standard"
  # Pull policy for images
  pullPolicy: IfNotPresent
  # Pull secrets for private registries
  imagePullSecrets: []

serviceAccount:
  create: true
  name: insights-ros-ingress
  annotations: {}

# Main application configuration
app:
  name: insights-ros-ingress
  version: "1.0.0"

image:
  repository: quay.io/insights-onprem/insights-ros-ingress
  tag: "latest"
  pullPolicy: IfNotPresent

replicaCount: 1

# Service configuration
service:
  type: ClusterIP
  port: 8080

# Route configuration (for OpenShift)
route:
  enabled: false
  host: ""
  annotations: {}
  tls:
    enabled: false

# Database configuration for insights-ros-ingress
database:
  insights:
    image:
      repository: quay.io/insights-onprem/postgresql
      tag: "16"
    storage:
      size: 10Gi
    host: internal  # Use "internal" for the built-in database service
    port: 5432
    name: postgres
    username: postgres
    password: postgres
    sslMode: disable

# Kafka and Zookeeper configuration (main config for StatefulSets)
kafka:
  zookeeper:
    image:
      repository: confluentinc/cp-zookeeper
      tag: "7.4.10"
    clientPort: 2181
    serverId: 1
    storage:
      size: 5Gi
  broker:
    image:
      repository: confluentinc/cp-kafka
      tag: "7.5.3"
    brokerId: 1
    offsetsTopicReplicationFactor: 1
    autoCreateTopicsEnable: true
    storage:
      size: 10Gi
    port: 9092
  # Application kafka config for compatibility
  brokers:
    - "insights-ros-ingress-kafka:9092"
  topic: "hccm.ros.events"
  securityProtocol: "PLAINTEXT"
  clientId: "insights-ros-ingress"
  batchSize: 16384
  retries: 3
  security:
    enabled: false
    saslMechanism: ""
    saslUsername: ""
    saslPassword: ""
    sslCaLocation: ""
    existingSecret: ""


# MinIO configuration  
minio:
  image:
    repository: quay.io/minio/minio
    tag: "RELEASE.2025-07-23T15-54-02Z"
  storage:
    size: 10Gi
  rootUser: minioadmin
  rootPassword: minioadmin123
  ports:
    api: 9000
    console: 9990
  buckets:
    - insights-upload-perma
    - ros-data

# Application configuration
config:
  server:
    port: 8080
    readTimeout: 30
    writeTimeout: 30
    idleTimeout: 120
    debug: false
  
  upload:
    maxUploadSize: 104857600
    maxMemory: 33554432
    tempDir: "/tmp"
    allowedTypes: "application/vnd.redhat.hccm.upload"
    requireAuth: true
  
  logging:
    level: "info"
    format: "json"
    output: "stdout"
  
  metrics:
    enabled: true
    path: "/metrics"
    port: 8080

# Resource configuration
resources:
  # PostgreSQL minimum: ~128Mi memory, can run with 256Mi for development
  database:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  # Kafka minimum: ~512Mi memory, Zookeeper needs ~256Mi
  kafka:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  zookeeper:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

  # Regular application services (MinIO, Redis, insights-ros-ingress)
  application:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "300m"

# Startup and readiness probe configuration
probes:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Monitoring (ServiceMonitor for Prometheus)
monitoring:
  enabled: false  # Disabled by default for KIND compatibility

# Volume configuration
volumes: {}
volumeMounts: {}

# Pod and environment configuration
podAnnotations: {}
podLabels: {}
env: {}
envFrom: []
nodeSelector: {}
affinity: {}
tolerations: {}

# Probes configuration
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Pod security context
podSecurityContext:
  fsGroup: 1001

# Container security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80


# Additional labels for all resources
commonLabels: {}

# Additional annotations for all resources
commonAnnotations: {}

# Server configuration (used in deployment)
server:
  port: 8080
  readTimeout: 30
  writeTimeout: 30
  idleTimeout: 120
  debug: false

# Storage configuration (used in deployment)
storage:
  bucket: "ros-data"
  useSSL: false
  urlExpiration: 172800
  pathPrefix: "ros"
  existingSecret: "insights-ros-ingress-minio-credentials"
  accessKeyKey: "access-key"
  secretKeyKey: "secret-key"

# Authentication configuration (used in various templates)
auth:
  enabled: true
  allowedOrgs: []
  existingSecret: "auth-credentials"
  jwtSecretKey: "jwt-secret"

# Upload configuration (used in deployment)
upload:
  maxUploadSize: 104857600
  maxMemory: 33554432
  tempDir: "/tmp"
  allowedTypes:
    - "application/vnd.redhat.hccm.upload"
  requireAuth: true

# Logging configuration (used in deployment)
logging:
  level: "info"
  format: "json"
  output: "stdout"

# Metrics configuration (used in servicemonitor)
metrics:
  enabled: true
  path: "/metrics"
  port: 8080